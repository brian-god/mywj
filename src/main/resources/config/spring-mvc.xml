<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
               xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:p="http://www.springframework.org/schema/p"
               xmlns:context="http://www.springframework.org/schema/context"
               xmlns:mvc="http://www.springframework.org/schema/mvc"
               xsi:schemaLocation="
        http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
        http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context.xsd
        http://www.springframework.org/schema/mvc
        http://www.springframework.org/schema/mvc/spring-mvc-3.0.xsd">
<!--在spring-mvc.xml中启用默认Servlet-->
    <mvc:default-servlet-handler/>
<!-- 启动时自动扫描该包下所有的Bean -->
<context:component-scan base-package="com.hugo" />
    <!-- 启动注解驱动的spring MVC功能,注册请求url和注解POJO类方法的映射-->
    <mvc:annotation-driven />
<!--所有的访问都统一先由InternalResourceViewResolver类处理-->
    <bean id="viewResolver" class="org.springframework.web.servlet.view.InternalResourceViewResolver">
        <property name="viewClass" value="org.springframework.web.servlet.view.JstlView" />
        <property name="prefix" value="WEB-INF/views/" />      <!-- 前缀 -->
        <property name="suffix" value=".jsp" />   <!-- 后-->
    </bean>
    <!--这里是对静态资源的映射-->
    <mvc:resources mapping="/js/**" location="/resources/js/" />
    <mvc:resources mapping="/css/**" location="/resources/css/" />
    <mvc:resources mapping="/img/**" location="/resources/img/" />

    <!--配置拦截器, 多个拦截器,顺序执行 -->
    <!--<mvc:interceptors>
        <mvc:interceptor> -->
            <!--
                /**的意思是所有文件夹及里面的子文件夹
                /*是所有文件夹，不含子文件夹
                /是web项目的根目录
              -->
            <!--<mvc:mapping path="/**"/> -->
            <!-- 需排除拦截的地址 -->
            <!--<bean id="commonInterceptor" class="com.hugo.Interceptor.UserLoginInterceptor"></bean>  --><!--这个类就是我们自定义的Interceptor -->
        <!--</mvc:interceptor> -->
        <!-- 当设置多个拦截器时，先按顺序调用preHandle方法，然后逆序调用每个拦截器的postHandle和afterCompletion方法  -->
            <!--</mvc:interceptors> -->
</beans>